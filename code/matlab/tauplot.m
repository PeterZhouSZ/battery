%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\!\battery\battery\code\python\out.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/02/15 19:54:14

%% Initialize variables.
filename = 'C:\!\battery\battery\data\results\Feb2018_aspect\out.csv';
delimiter = '\t';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,5,6,9]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [2,3,4,5,6,9]);
rawCellColumns = raw(:, [1,7,8]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
path = rawCellColumns(:, 1);
porosity = cell2mat(rawNumericColumns(:, 1));
taux = cell2mat(rawNumericColumns(:, 2));
tauy = cell2mat(rawNumericColumns(:, 3));
tauz = cell2mat(rawNumericColumns(:, 4));
solvetime = cell2mat(rawNumericColumns(:, 5));
dimx = rawCellColumns(:, 2);
dimy = rawCellColumns(:, 3);
dimz = cell2mat(rawNumericColumns(:, 6));


%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;

%porosity = ones(size(porosity)) - porosity

paperPX = [0.6563003
0.62017417
0.5230335
0.5135552
0.4907077
0.44498536
0.39933562];

paperPY = [0.65630937
0.62011975
0.5249473
0.5135552
0.48877576
0.44499445
0.39929026
];

paperPZ = [0.4029392
0.44904914
0.49250028
0.5151767
0.52564067
0.5236879
0.6213485
0.65736705
];

paperX = [1.2852846
1.4452202
1.4506981
1.5640172
1.5878625
1.567884
1.7283566
];
paperY = [1.3078411
1.3098818
1.4731472
1.5640172
1.5203007
1.5904404
1.6155746
];
paperZ = [6.1070075
4.572852
3.7486696
3.3421764
3.420658
3.2179108
2.752262
2.5368207
]
%%


%model = @(x,alpha) x^alpha
model = fittype('x^a', 'independent', 'x')

ax = [0.2 0.8 1 7];
X = linspace(ax(1),ax(2),50)



fx=fit(porosity,taux, model,'Exclude', find(taux == 0))
fy=fit(porosity,tauy, model,'Exclude', find(tauy == 0))
fz=fit(porosity,tauz, model,'Exclude', find(tauz == 0))


figure;
hold on

plot(X, X.^fx.a ,'b')
plot(X, X.^fy.a ,'r')
plot(X, X.^fz.a ,'g')

scatter(porosity, taux,'b>','filled','MarkerEdgeColor',[0 0 0])
scatter(porosity, tauy,'r>','filled','MarkerEdgeColor',[0 0 0])
scatter(porosity, tauz,'g>','filled','MarkerEdgeColor',[0 0 0])

scatter(paperPX, paperX,'bo','MarkerFaceColor',[1 1 1],'MarkerEdgeColor',[0 0 1])
scatter(paperPY, paperY,'ro','MarkerFaceColor',[1 1 1],'MarkerEdgeColor',[1 0 0])
scatter(paperPZ, paperZ,'go','MarkerFaceColor',[1 1 1],'MarkerEdgeColor',[0 0.5 0])


%fx=fit(porosity,taux,'exp1','Exclude', find(tauy == 0))
%fy=fit(porosity,tauy,'exp1', 'Exclude',find(tauy == 0))
%fz=fit(porosity,tauz,'exp1','Exclude', find(tauz == 0))

%plot(fy,'r')
%plot(fz,'g')

hLeg = legend(...
    strcat('x (alpha = ',num2str(fx.a),')'), ... 
    strcat('y (alpha = ',num2str(fy.a),')'), ... 
    strcat('z (alpha = ',num2str(fz.a),')') ... 
)
%set(hLeg,'visible','off')

%plot(fz,porosity,tauz,'g')
axis(ax)
axis square
xlabel('Porosity') % x-axis label
ylabel('Tortuosity') % y-axis label


